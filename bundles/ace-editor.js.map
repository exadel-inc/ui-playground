{"version":3,"file":"ace-editor.js","mappings":"qNAWA,MAAMA,UAAkB,IAetBC,YAAYC,GACVC,QACAC,KAAKC,QAAS,IAAAC,MAAKJ,GACnBE,KAAKC,OAAOE,iBAAiB,SAAUH,KAAKI,WAC5CJ,KAAKC,OAAOI,UAAU,aAAa,GACnCL,KAAKC,OAAOI,UAAU,OAAQ,gBAChC,CAKOC,UAAUC,GACfP,KAAKC,OAAOO,WAAW,OAAD,wBACjBZ,EAAUa,eACVF,GAEP,CAKOG,SAASC,GACdX,KAAKC,OAAOW,oBAAoB,SAAUZ,KAAKI,WAC/CJ,KAAKC,OAAOS,SAAS,SAAiBC,IAAS,GAC/CX,KAAKC,OAAOE,iBAAiB,SAAUH,KAAKI,UAC9C,CAGOS,WACL,OAAOb,KAAKC,OAAOY,UACrB,CAGOC,SACLd,KAAKC,OAAOa,QACd,CAGOC,UACLf,KAAKC,OAAOW,oBAAoB,SAAUZ,KAAKI,UACjD,CAIQA,YACNJ,KAAKgB,cAAc,IAAIC,YAAY,UACrC,EAzDe,EAAAR,cAA8B,CAC3CS,MAAO,UACPC,mBAAoB,EACpBC,MAAM,EACNC,SAAU,EACVC,SAAU,I,0TAkDZ,EADC,K,8BAOI,MAAMC,EAAS3B,C","sources":["webpack:///../src/plugins/editor/ace/ace-editor.ts"],"sourcesContent":["import js_beautify from 'js-beautify';\nimport {Ace, edit} from 'ace-builds';\nimport 'ace-builds/src-min-noconflict/mode-html';\nimport 'ace-builds/src-min-noconflict/theme-chrome';\nimport 'ace-builds/src-min-noconflict/theme-tomorrow_night';\nimport {bind} from '@exadel/esl/modules/esl-utils/decorators/bind';\nimport {SyntheticEventTarget} from '@exadel/esl/modules/esl-utils/dom/events/target';\n\nimport {EditorConfig, AceTheme} from './utils';\n\n/** {@link https://ace.c9.io/ Ace} editor wrapper */\nclass AceEditor extends SyntheticEventTarget {\n  /** Inner {@link https://ace.c9.io/ Ace} instance */\n  private editor: Ace.Editor;\n  /** Default {@link EditorConfig} options */\n  private static defaultConfig: EditorConfig = {\n    theme: AceTheme.Light,\n    printMarginColumn: -1,\n    wrap: true,\n    minLines: 8,\n    maxLines: 22,\n  };\n\n  /**\n   * @param {HTMLElement} element - element to place editor inside\n   */\n  constructor(element: HTMLElement) {\n    super();\n    this.editor = edit(element);\n    this.editor.addEventListener('change', this._onChange);\n    this.editor.setOption('useWorker', false);\n    this.editor.setOption('mode', 'ace/mode/html');\n  }\n\n  /** Merge config with the default one\n   * @param {Partial<EditorConfig>} config - new options to set\n   */\n  public setConfig(config: Partial<EditorConfig>): void {\n    this.editor.setOptions({\n      ...AceEditor.defaultConfig,\n      ...config\n    });\n  }\n\n  /** Set editor's text content\n   * @param {string} value - text content to set\n   */\n  public setValue(value: string): void {\n    this.editor.removeEventListener('change', this._onChange);\n    this.editor.setValue(js_beautify.html(value), -1);\n    this.editor.addEventListener('change', this._onChange);\n  }\n\n  /** @returns editor's text content */\n  public getValue(): string {\n    return this.editor.getValue();\n  }\n\n  /** Manually resize editor */\n  public resize(): void {\n    this.editor.resize();\n  }\n\n  /** Cleanup internal event listeners */\n  public destroy(): void {\n    this.editor.removeEventListener('change', this._onChange);\n  }\n\n  /** Handle editor's content change */\n  @bind\n  private _onChange() {\n    this.dispatchEvent(new CustomEvent('change'));\n  }\n}\n\nexport type {AceEditor};\nexport const Editor = AceEditor;\n"],"names":["AceEditor","constructor","element","super","this","editor","edit","addEventListener","_onChange","setOption","setConfig","config","setOptions","defaultConfig","setValue","value","removeEventListener","getValue","resize","destroy","dispatchEvent","CustomEvent","theme","printMarginColumn","wrap","minLines","maxLines","Editor"],"sourceRoot":""}